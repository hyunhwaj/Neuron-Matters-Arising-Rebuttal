otherCovariates$AOD <- as.numeric(otherCovariates$AOD)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$NP.1 <- as.factor(otherCovariates$NP.1)
comparison_annot <- data.frame(otherCovariates)
designMat = model.matrix( ~ 0 + NP.1 + AOD + Race + RIN + Sex + Batch + PMI ,data = comparison_annot)
virMat <- Mat
contrast.matrix <- makeContrasts(np_4_minus_1 = NP.14 - NP.11,
np_4_3_minus_1 = (NP.14+NP.13)/2 - NP.11,
np_4_3_2_minus_1 = (NP.14+NP.13+NP.12)/3 - NP.11,
levels=designMat)
fullReadsPerSample <- as.numeric(MSBB_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MSBB_RNA_workspace$metadata$Sample_ID)])
=======
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
v <- voom(dge, designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v, design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
}
viral_tT <- topTable(fit,number=Inf)
viral_tT <- data.frame(sequence = MAYO_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MAYO_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
}
options(stringsAsFactors = FALSE)
library(openxlsx)
library(edgeR)
library(limma)
library(plyr)
library(pheatmap)
library(reshape2)
# Load up workspace containing viral counts and metadata ------------------
load("data/MAYO_TCX_RNA_workspace.RData")
run_voom <- function(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F) {
otherCovariates$Diagnosis <- factor(as.character(otherCovariates$Diagnosis), levels = c("AD", "Control"))
designMat = model.matrix( ~ 0 + Diagnosis + AOD + Sex + Flowcell + Source + RIN  ,data = otherCovariates)
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
>>>>>>> 8e237086a26df4c5c7f7a8cab0b4b72650e043ca
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
<<<<<<< HEAD
paths <- names(MSBB_RNA_workspace$pathologySampleSets)
tests <- colnames(contrast.matrix)
for(i in 1:3) {
viral_tT <- topTable(fit,number=Inf, tests[i])
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
featureDEPerPathologySubset[[paths[i]]] <- viral_tT
}
virus_level_DE_per_region[[tissues[tissue_i]]] <- featureDEPerPathologySubset
}
virus_level_DE_per_region
options(stringsAsFactors = FALSE)
library(openxlsx)
library(edgeR)
library(limma)
library(plyr)
library(pheatmap)
library(reshape2)
# Load up workspace containing viral counts and metadata ------------------
load("data/MSBB_RNA_workspace.RData")
tissues <- c("BM_22", "BM_36", "BM_10", "BM_44")
## Differential expression of virus level abundance
virus_level_DE_per_region <- vector("list", length(tissues))
names(virus_level_DE_per_region) <- tissues
for(tissue_i in 1:length(tissues)){
featureDEPerPathologySubset <- vector("list", length(MSBB_RNA_workspace$pathologySampleSets))
names(featureDEPerPathologySubset) <- names(MSBB_RNA_workspace$pathologySampleSets)
Mat <- MSBB_RNA_workspace$virusLevelCounts[,MSBB_RNA_workspace$metadata$Sample_ID[which(MSBB_RNA_workspace$metadata$Region == tissues[tissue_i])]]
otherCovariates <- MSBB_RNA_workspace$metadata[match(colnames(Mat), MSBB_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Race", "Sex", "Batch", "PMI", "NP.1")]
otherCovariates$AOD <- gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE)
otherCovariates$AOD <- as.numeric(otherCovariates$AOD)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$NP.1 <- as.factor(otherCovariates$NP.1)
comparison_annot <- data.frame(otherCovariates)
designMat = model.matrix( ~ 0 + NP.1 + AOD + Race + RIN + Sex + Batch + PMI ,data = comparison_annot)
virMat <- Mat
contrast.matrix <- makeContrasts(np_4_minus_1 = NP.14 - NP.11,
np_4_3_minus_1 = (NP.14+NP.13)/2 - NP.11,
np_4_3_2_minus_1 = (NP.14+NP.13+NP.12)/3 - NP.11,
levels=designMat)
fullReadsPerSample <- as.numeric(MSBB_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MSBB_RNA_workspace$metadata$Sample_ID)])
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
paths <- names(MSBB_RNA_workspace$pathologySampleSets)
tests <- colnames(contrast.matrix)
for(i in 1:3) {
viral_tT <- topTable(fit,number=Inf, tests[i])
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
featureDEPerPathologySubset[[paths[i]]] <- viral_tT
}
virus_level_DE_per_region[[tissues[tissue_i]]] <- featureDEPerPathologySubset
}
virus_level_DE_per_region$BM_22$AD_possible
virus_level_DE_per_region_origin$BM_22$AD_possible
load("~/Projects/PlayGround/7766b3dd0aa3d84ad43d5e62b53f06bc/results/tmp.Rdata")
virus_level_DE_per_region_origin$BM_22$AD_possible
options(stringsAsFactors = FALSE)
library(openxlsx)
library(edgeR)
library(limma)
library(plyr)
library(pheatmap)
library(reshape2)
# Load up workspace containing viral counts and metadata ------------------
load("data/MSBB_RNA_workspace.RData")
tissues <- c("BM_22", "BM_36", "BM_10", "BM_44")
## Differential expression of virus level abundance
virus_level_DE_per_region <- vector("list", length(tissues))
names(virus_level_DE_per_region) <- tissues
for(tissue_i in 1:length(tissues)){
featureDEPerPathologySubset <- vector("list", length(MSBB_RNA_workspace$pathologySampleSets))
names(featureDEPerPathologySubset) <- names(MSBB_RNA_workspace$pathologySampleSets)
Mat <- MSBB_RNA_workspace$virusLevelCounts[,MSBB_RNA_workspace$metadata$Sample_ID[which(MSBB_RNA_workspace$metadata$Region == tissues[tissue_i])]]
otherCovariates <- MSBB_RNA_workspace$metadata[match(colnames(Mat), MSBB_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Race", "Sex", "Batch", "PMI", "NP.1")]
otherCovariates$AOD <- gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE)
otherCovariates$AOD <- as.numeric(otherCovariates$AOD)
=======
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
v <- voom(dge, designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v, design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
}
viral_tT <- topTable(fit,number=Inf)
viral_tT <- data.frame(sequence = MAYO_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MAYO_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
}
# Viral level summary -----------------------------------------------------
exprMat <- MAYO_RNA_workspace$virusLevelCounts[,MAYO_RNA_workspace$metadata$Sample_ID]
otherCovariates <- MAYO_RNA_workspace$metadata[match(colnames(exprMat), MAYO_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Sex", "Source", "Flowcell", "Diagnosis")]
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "_or_above", replacement = "", fixed = TRUE))
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Diagnosis <- as.factor(gsub(otherCovariates$Diagnosis, pattern = " ", replacement = "_"))
otherCovariates$Source <- as.factor(otherCovariates$Source)
otherCovariates$Flowcell <- as.factor(otherCovariates$Flowcell)
# DE ---------------------------------------------------------------------
virMat <- exprMat
fullReadsPerSample <- as.numeric(MAYO_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MAYO_RNA_workspace$metadata$Sample_ID)])
will_keep <- otherCovariates$Diagnosis == "AD" | otherCovariates$Diagnosis == "Control"
virMat <- virMat[,will_keep]
fullReadsPerSample <- fullReadsPerSample[will_keep]
otherCovariates <- otherCovariates[will_keep,]
run_voom(virMat, fullReadsPerSample, MAYO_RNA_workspace)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR <- function(virMat, fullReadsPerSample, otherCovariates, ROSMAP_RNA_workspace, filter = F) {
otherCovariates$Diagnosis <- factor(as.character(otherCovariates$Diagnosis), levels = c("AD", "Control"))
designMat = model.matrix( ~ 0 + Diagnosis + AOD + Sex + Flowcell + Source + RIN  ,data = otherCovariates)
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
contrast.matrix <- makeContrasts(statusCase - statusControl,
levels=designMat)
if(!filter){
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge[retainVir,], designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge, designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
as.data.frame(topTags(glf, n = Inf))
}
viral_tT <- as.data.frame(topTags(glf, n = Inf))
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
}
exprMat <- MAYO_RNA_workspace$virusLevelCounts[,MAYO_RNA_workspace$metadata$Sample_ID]
otherCovariates <- MAYO_RNA_workspace$metadata[match(colnames(exprMat), MAYO_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Sex", "Source", "Flowcell", "Diagnosis")]
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "_or_above", replacement = "", fixed = TRUE))
exprMat <- MAYO_RNA_workspace$virusLevelCounts[,MAYO_RNA_workspace$metadata$Sample_ID]
otherCovariates <- MAYO_RNA_workspace$metadata[match(colnames(exprMat), MAYO_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Sex", "Source", "Flowcell", "Diagnosis")]
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "_or_above", replacement = "", fixed = TRUE))
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Diagnosis <- as.factor(gsub(otherCovariates$Diagnosis, pattern = " ", replacement = "_"))
otherCovariates$Source <- as.factor(otherCovariates$Source)
otherCovariates$Flowcell <- as.factor(otherCovariates$Flowcell)
# DE ---------------------------------------------------------------------
virMat <- exprMat
fullReadsPerSample <- as.numeric(MAYO_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MAYO_RNA_workspace$metadata$Sample_ID)])
will_keep <- otherCovariates$Diagnosis == "AD" | otherCovariates$Diagnosis == "Control"
virMat <- virMat[,will_keep]
fullReadsPerSample <- fullReadsPerSample[will_keep]
otherCovariates <- otherCovariates[will_keep,]
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
run_edgeR <- function(virMat, fullReadsPerSample, otherCovariates, ROSMAP_RNA_workspace, filter = F) {
otherCovariates$Diagnosis <- factor(as.character(otherCovariates$Diagnosis), levels = c("AD", "Control"))
designMat = model.matrix( ~ 0 + Diagnosis + AOD + Sex + Flowcell + Source + RIN  ,data = otherCovariates)
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
if(!filter){
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge[retainVir,], designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge, designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
as.data.frame(topTags(glf, n = Inf))
}
viral_tT <- as.data.frame(topTags(glf, n = Inf))
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
}
exprMat <- MAYO_RNA_workspace$virusLevelCounts[,MAYO_RNA_workspace$metadata$Sample_ID]
otherCovariates <- MAYO_RNA_workspace$metadata[match(colnames(exprMat), MAYO_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Sex", "Source", "Flowcell", "Diagnosis")]
exprMat <- MAYO_RNA_workspace$virusLevelCounts[,MAYO_RNA_workspace$metadata$Sample_ID]
otherCovariates <- MAYO_RNA_workspace$metadata[match(colnames(exprMat), MAYO_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Sex", "Source", "Flowcell", "Diagnosis")]
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "_or_above", replacement = "", fixed = TRUE))
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Diagnosis <- as.factor(gsub(otherCovariates$Diagnosis, pattern = " ", replacement = "_"))
otherCovariates$Source <- as.factor(otherCovariates$Source)
otherCovariates$Flowcell <- as.factor(otherCovariates$Flowcell)
# DE ---------------------------------------------------------------------
virMat <- exprMat
fullReadsPerSample <- as.numeric(MAYO_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MAYO_RNA_workspace$metadata$Sample_ID)])
will_keep <- otherCovariates$Diagnosis == "AD" | otherCovariates$Diagnosis == "Control"
virMat <- virMat[,will_keep]
fullReadsPerSample <- fullReadsPerSample[will_keep]
otherCovariates <- otherCovariates[will_keep,]
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
run_edgeR <- function(virMat, fullReadsPerSample, otherCovariates, ROSMAP_RNA_workspace, filter = F) {
otherCovariates$Diagnosis <- factor(as.character(otherCovariates$Diagnosis), levels = c("AD", "Control"))
designMat = model.matrix( ~ 0 + Diagnosis + AOD + Sex + Flowcell + Source + RIN  ,data = otherCovariates)
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
if(!filter){
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge[retainVir,], designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge, designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
as.data.frame(topTags(glf, n = Inf))
}
viral_tT <- as.data.frame(topTags(glf, n = Inf))
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
}
exprMat <- MAYO_RNA_workspace$virusLevelCounts[,MAYO_RNA_workspace$metadata$Sample_ID]
otherCovariates <- MAYO_RNA_workspace$metadata[match(colnames(exprMat), MAYO_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Sex", "Source", "Flowcell", "Diagnosis")]
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "_or_above", replacement = "", fixed = TRUE))
>>>>>>> 8e237086a26df4c5c7f7a8cab0b4b72650e043ca
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
<<<<<<< HEAD
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$NP.1 <- as.factor(otherCovariates$NP.1)
comparison_annot <- data.frame(otherCovariates)
designMat = model.matrix( ~ 0 + NP.1 + AOD + Race + RIN + Sex + Batch + PMI ,data = comparison_annot)
virMat <- Mat
contrast.matrix <- makeContrasts(np_4_minus_1 = NP.14 - NP.11,
np_4_3_minus_1 = (NP.14+NP.13) - NP.11,
np_4_3_2_minus_1 = (NP.14+NP.13+NP.12) - NP.11,
levels=designMat)
fullReadsPerSample <- as.numeric(MSBB_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MSBB_RNA_workspace$metadata$Sample_ID)])
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
paths <- names(MSBB_RNA_workspace$pathologySampleSets)
tests <- colnames(contrast.matrix)
for(i in 1:3) {
viral_tT <- topTable(fit,number=Inf, tests[i])
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
featureDEPerPathologySubset[[paths[i]]] <- viral_tT
}
virus_level_DE_per_region[[tissues[tissue_i]]] <- featureDEPerPathologySubset
}
virus_level_DE_per_region_origin$BM_22$AD_possible
virus_level_DE_per_region$BM_22$AD_possible
=======
otherCovariates$Diagnosis <- as.factor(gsub(otherCovariates$Diagnosis, pattern = " ", replacement = "_"))
otherCovariates$Source <- as.factor(otherCovariates$Source)
otherCovariates$Flowcell <- as.factor(otherCovariates$Flowcell)
# DE ---------------------------------------------------------------------
virMat <- exprMat
fullReadsPerSample <- as.numeric(MAYO_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MAYO_RNA_workspace$metadata$Sample_ID)])
will_keep <- otherCovariates$Diagnosis == "AD" | otherCovariates$Diagnosis == "Control"
virMat <- virMat[,will_keep]
fullReadsPerSample <- fullReadsPerSample[will_keep]
otherCovariates <- otherCovariates[will_keep,]
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
>>>>>>> 8e237086a26df4c5c7f7a8cab0b4b72650e043ca
options(stringsAsFactors = FALSE)
library(openxlsx)
library(edgeR)
library(limma)
library(plyr)
library(pheatmap)
library(reshape2)
# Load up workspace containing viral counts and metadata ------------------
<<<<<<< HEAD
load("data/MSBB_RNA_workspace.RData")
tissues <- c("BM_22", "BM_36", "BM_10", "BM_44")
## Differential expression of virus level abundance
virus_level_DE_per_region <- vector("list", length(tissues))
names(virus_level_DE_per_region) <- tissues
for(tissue_i in 1:length(tissues)){
featureDEPerPathologySubset <- vector("list", length(MSBB_RNA_workspace$pathologySampleSets))
names(featureDEPerPathologySubset) <- names(MSBB_RNA_workspace$pathologySampleSets)
Mat <- MSBB_RNA_workspace$virusLevelCounts[,MSBB_RNA_workspace$metadata$Sample_ID[which(MSBB_RNA_workspace$metadata$Region == tissues[tissue_i])]]
otherCovariates <- MSBB_RNA_workspace$metadata[match(colnames(Mat), MSBB_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Race", "Sex", "Batch", "PMI", "NP.1")]
otherCovariates$AOD <- gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE)
otherCovariates$AOD <- as.numeric(otherCovariates$AOD)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$NP.1 <- as.factor(otherCovariates$NP.1)
comparison_annot <- data.frame(otherCovariates)
designMat = model.matrix( ~ 0 + NP.1 + AOD + Race + RIN + Sex + Batch + PMI ,data = comparison_annot)
virMat <- Mat
contrast.matrix <- makeContrasts(np_4_minus_1 = NP.14 - NP.11,
np_4_3_minus_1 = (NP.14+NP.13)/2 - NP.11,
np_4_3_2_minus_1 = (NP.14+NP.13+NP.12)/3 - NP.11,
levels=designMat)
fullReadsPerSample <- as.numeric(MSBB_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MSBB_RNA_workspace$metadata$Sample_ID)])
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
=======
load("data/MAYO_TCX_RNA_workspace.RData")
run_voom <- function(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F) {
otherCovariates$Diagnosis <- factor(as.character(otherCovariates$Diagnosis), levels = c("AD", "Control"))
designMat = model.matrix( ~ 0 + Diagnosis + AOD + Sex + Flowcell + Source + RIN  ,data = otherCovariates)
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
if(!filter) {
>>>>>>> 8e237086a26df4c5c7f7a8cab0b4b72650e043ca
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
<<<<<<< HEAD
paths <- names(MSBB_RNA_workspace$pathologySampleSets)
tests <- colnames(contrast.matrix)
for(i in 1:3) {
viral_tT <- topTable(fit,number=Inf, tests[i])
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
featureDEPerPathologySubset[[paths[i]]] <- viral_tT
}
virus_level_DE_per_region[[tissues[tissue_i]]] <- featureDEPerPathologySubset
}
virus_level_DE_per_region$BM_22$AD_possible
virus_level_DE_per_region_origion$BM_22$AD_possible
virus_level_DE_per_region_origin$BM_22$AD_possible
virus_level_DE_per_region_origin$BM_22$AD_definite
virus_level_DE_per_region$BM_22$AD_definite
contrast.matrix
=======
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
v <- voom(dge, designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v, design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
}
viral_tT <- topTable(fit,number=Inf)
viral_tT <- data.frame(sequence = MAYO_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MAYO_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
}
run_edgeR <- function(virMat, fullReadsPerSample, otherCovariates, ROSMAP_RNA_workspace, filter = F) {
otherCovariates$Diagnosis <- factor(as.character(otherCovariates$Diagnosis), levels = c("AD", "Control"))
designMat = model.matrix( ~ 0 + Diagnosis + AOD + Sex + Flowcell + Source + RIN  ,data = otherCovariates)
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
if(!filter){
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge[retainVir,], designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge, designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
as.data.frame(topTags(glf, n = Inf))
}
viral_tT <- as.data.frame(topTags(glf, n = Inf))
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
}
# Viral level summary -----------------------------------------------------
exprMat <- MAYO_RNA_workspace$virusLevelCounts[,MAYO_RNA_workspace$metadata$Sample_ID]
otherCovariates <- MAYO_RNA_workspace$metadata[match(colnames(exprMat), MAYO_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Sex", "Source", "Flowcell", "Diagnosis")]
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "_or_above", replacement = "", fixed = TRUE))
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Diagnosis <- as.factor(gsub(otherCovariates$Diagnosis, pattern = " ", replacement = "_"))
otherCovariates$Source <- as.factor(otherCovariates$Source)
otherCovariates$Flowcell <- as.factor(otherCovariates$Flowcell)
# DE ---------------------------------------------------------------------
virMat <- exprMat
fullReadsPerSample <- as.numeric(MAYO_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MAYO_RNA_workspace$metadata$Sample_ID)])
#will_keep <- otherCovariates$Diagnosis == "AD" | otherCovariates$Diagnosis == "Control"
#virMat <- virMat[,will_keep]
#fullReadsPerSample <- fullReadsPerSample[will_keep]
#otherCovariates <- otherCovariates[will_keep,]
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
>>>>>>> 8e237086a26df4c5c7f7a8cab0b4b72650e043ca
options(stringsAsFactors = FALSE)
library(openxlsx)
library(edgeR)
library(limma)
library(plyr)
library(pheatmap)
library(reshape2)
# Load up workspace containing viral counts and metadata ------------------
<<<<<<< HEAD
load("data/MSBB_RNA_workspace.RData")
tissues <- c("BM_22", "BM_36", "BM_10", "BM_44")
## Differential expression of virus level abundance
virus_level_DE_per_region <- vector("list", length(tissues))
names(virus_level_DE_per_region) <- tissues
for(tissue_i in 1:length(tissues)){
featureDEPerPathologySubset <- vector("list", length(MSBB_RNA_workspace$pathologySampleSets))
names(featureDEPerPathologySubset) <- names(MSBB_RNA_workspace$pathologySampleSets)
Mat <- MSBB_RNA_workspace$virusLevelCounts[,MSBB_RNA_workspace$metadata$Sample_ID[which(MSBB_RNA_workspace$metadata$Region == tissues[tissue_i])]]
otherCovariates <- MSBB_RNA_workspace$metadata[match(colnames(Mat), MSBB_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Race", "Sex", "Batch", "PMI", "NP.1")]
otherCovariates$AOD <- gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE)
otherCovariates$AOD <- as.numeric(otherCovariates$AOD)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$NP.1 <- as.factor(otherCovariates$NP.1)
comparison_annot <- data.frame(otherCovariates)
designMat = model.matrix( ~ 0 + NP.1 + AOD + Race + RIN + Sex + Batch + PMI ,data = comparison_annot)
virMat <- Mat
contrast.matrix <- makeContrasts(np_4_minus_1 = NP.14 - NP.11,
np_3_minus_1 = NP.13 - NP.11,
np_2_minus_1 = NP.12 - NP.11,
levels=designMat)
fullReadsPerSample <- as.numeric(MSBB_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MSBB_RNA_workspace$metadata$Sample_ID)])
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
=======
load("data/MAYO_TCX_RNA_workspace.RData")
run_voom <- function(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F) {
otherCovariates$Diagnosis <- factor(as.character(otherCovariates$Diagnosis), levels = c("AD", "Control"))
designMat = model.matrix( ~ 0 + Diagnosis + AOD + Sex + Flowcell + Source + RIN  ,data = otherCovariates)
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
if(!filter) {
>>>>>>> 8e237086a26df4c5c7f7a8cab0b4b72650e043ca
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
<<<<<<< HEAD
paths <- names(MSBB_RNA_workspace$pathologySampleSets)
tests <- colnames(contrast.matrix)
for(i in 1:3) {
viral_tT <- topTable(fit,number=Inf, tests[i])
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
featureDEPerPathologySubset[[paths[i]]] <- viral_tT
}
virus_level_DE_per_region[[tissues[tissue_i]]] <- featureDEPerPathologySubset
}
virus_level_DE_per_region
virus_level_DE_per_region$BM_22$AD_possible
virus_level_DE_per_region$BM_22$AD_likely
virus_level_DE_per_region$BM_22$AD_definite
options(stringsAsFactors = FALSE)
library(openxlsx)
library(edgeR)
library(limma)
library(plyr)
library(pheatmap)
library(reshape2)
# Load up workspace containing viral counts and metadata ------------------
load("data/MSBB_RNA_workspace.RData")
tissues <- c("BM_22", "BM_36", "BM_10", "BM_44")
## Differential expression of virus level abundance
virus_level_DE_per_region <- vector("list", length(tissues))
names(virus_level_DE_per_region) <- tissues
for(tissue_i in 1:length(tissues)){
featureDEPerPathologySubset <- vector("list", length(MSBB_RNA_workspace$pathologySampleSets))
names(featureDEPerPathologySubset) <- names(MSBB_RNA_workspace$pathologySampleSets)
Mat <- MSBB_RNA_workspace$virusLevelCounts[,MSBB_RNA_workspace$metadata$Sample_ID[which(MSBB_RNA_workspace$metadata$Region == tissues[tissue_i])]]
otherCovariates <- MSBB_RNA_workspace$metadata[match(colnames(Mat), MSBB_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Race", "Sex", "Batch", "PMI", "NP.1")]
otherCovariates$AOD <- gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE)
otherCovariates$AOD <- as.numeric(otherCovariates$AOD)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$NP.1 <- as.factor(otherCovariates$NP.1)
comparison_annot <- data.frame(otherCovariates)
designMat = model.matrix( ~ 0 + NP.1 + AOD + Race + RIN + Sex + Batch + PMI ,data = comparison_annot)
virMat <- Mat
contrast.matrix <- makeContrasts(AD_Definite = NP.14 - NP.11,
AD_Likely = (NP.14+NP.13)/2 - NP.11,
AD_Possible = (NP.14+NP.13+NP.12)/3 - NP.11,
levels=designMat)
fullReadsPerSample <- as.numeric(MSBB_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MSBB_RNA_workspace$metadata$Sample_ID)])
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
paths <- names(MSBB_RNA_workspace$pathologySampleSets)
tests <- colnames(contrast.matrix)
for(i in 1:3) {
viral_tT <- topTable(fit,number=Inf, tests[i])
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
featureDEPerPathologySubset[[paths[i]]] <- viral_tT
}
virus_level_DE_per_region[[tissues[tissue_i]]] <- featureDEPerPathologySubset
}
virus_level_DE_per_region
load('results/tmp.Rdata')
virus_level_DE_per_region_origin
orig <- virus_level_DE_per_region_origin
cont <-virus_level_DE_per_region
names(orig) == names(cont)
all(names(orig) == names(cont))
for(i in names(orig)) {
print(all(names(orig[[i]])==names(cont[[i]])))
}
for(i in names(orig)) {
for(j in names(orig[[i]])) {
df_o <- orig[[i]][[j]]
df_c <- cont[[i]][[j]]
}
}
df_o
df_c
library(tidyverse)
df_o
df_c
for(i in names(orig)) {
for(j in names(orig[[i]])) {
df_o <- orig[[i]][[j]]
df_c <- cont[[i]][[j]]
left_join(df_o, df_c, by = "name", suffix = c(".orig", ".cont"))
}
}
df_mg <- tibble()
df_mg <- tibble()
for(i in names(orig)) {
for(j in names(orig[[i]])) {
df_o <- orig[[i]][[j]]
df_c <- cont[[i]][[j]]
left_join(df_o, df_c, by = "name", suffix = c(".orig", ".cont")) %>%
ggplot(aes(x=P.Value.orig, y=P.Value.cont)) +
geom_point() %>% print
}
}
for(i in names(orig)) {
for(j in names(orig[[i]])) {
df_o <- orig[[i]][[j]]
df_c <- cont[[i]][[j]]
p <- left_join(df_o, df_c, by = "name", suffix = c(".orig", ".cont")) %>%
ggplot(aes(x=P.Value.orig, y=P.Value.cont)) +
geom_point()
print(p)
}
}
df_mg <- tibble()
for(i in names(orig)) {
for(j in names(orig[[i]])) {
df_o <- orig[[i]][[j]]
df_c <- cont[[i]][[j]]
df_mg <- bind_rows(
df_mg,
left_join(df_o, df_c, by = "name", suffix = c(".orig", ".cont")) %>%
mutate(tissue = i) %>%
mutate(test = j)
)
}
}
df_mg
View(df_mg)
=======
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
v <- voom(dge, designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v, design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
}
viral_tT <- topTable(fit,number=Inf)
viral_tT <- data.frame(sequence = MAYO_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MAYO_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
}
run_edgeR <- function(virMat, fullReadsPerSample, otherCovariates, ROSMAP_RNA_workspace, filter = F) {
otherCovariates$Diagnosis <- factor(as.character(otherCovariates$Diagnosis), levels = c("AD", "Control"))
designMat = model.matrix( ~ 0 + Diagnosis + AOD + Sex + Flowcell + Source + RIN  ,data = otherCovariates)
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
if(!filter){
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge[retainVir,], designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge, designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
as.data.frame(topTags(glf, n = Inf))
}
viral_tT <- as.data.frame(topTags(glf, n = Inf))
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
}
# Viral level summary -----------------------------------------------------
exprMat <- MAYO_RNA_workspace$virusLevelCounts[,MAYO_RNA_workspace$metadata$Sample_ID]
otherCovariates <- MAYO_RNA_workspace$metadata[match(colnames(exprMat), MAYO_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Sex", "Source", "Flowcell", "Diagnosis")]
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "_or_above", replacement = "", fixed = TRUE))
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Diagnosis <- as.factor(gsub(otherCovariates$Diagnosis, pattern = " ", replacement = "_"))
otherCovariates$Source <- as.factor(otherCovariates$Source)
otherCovariates$Flowcell <- as.factor(otherCovariates$Flowcell)
# DE ---------------------------------------------------------------------
virMat <- exprMat
fullReadsPerSample <- as.numeric(MAYO_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MAYO_RNA_workspace$metadata$Sample_ID)])
#will_keep <- otherCovariates$Diagnosis == "AD" | otherCovariates$Diagnosis == "Control"
#virMat <- virMat[,will_keep]
#fullReadsPerSample <- fullReadsPerSample[will_keep]
#otherCovariates <- otherCovariates[will_keep,]
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
virMat
dim(virMat)
dim(fullReadsPerSample)
length(fullReadsPerSample)
dim(otherCovariates)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
>>>>>>> 8e237086a26df4c5c7f7a8cab0b4b72650e043ca
options(stringsAsFactors = FALSE)
library(openxlsx)
library(edgeR)
library(limma)
library(plyr)
library(pheatmap)
library(reshape2)
# Load up workspace containing viral counts and metadata ------------------
<<<<<<< HEAD
load("data/MSBB_RNA_workspace.RData")
tissues <- c("BM_22", "BM_36", "BM_10", "BM_44")
## Differential expression of virus level abundance
virus_level_DE_per_region <- vector("list", length(tissues))
names(virus_level_DE_per_region) <- tissues
for(tissue_i in 1:length(tissues)){
featureDEPerPathologySubset <- vector("list", length(MSBB_RNA_workspace$pathologySampleSets))
names(featureDEPerPathologySubset) <- names(MSBB_RNA_workspace$pathologySampleSets)
Mat <- MSBB_RNA_workspace$virusLevelCounts[,MSBB_RNA_workspace$metadata$Sample_ID[which(MSBB_RNA_workspace$metadata$Region == tissues[tissue_i])]]
otherCovariates <- MSBB_RNA_workspace$metadata[match(colnames(Mat), MSBB_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Race", "Sex", "Batch", "PMI", "NP.1")]
otherCovariates$AOD <- gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE)
otherCovariates$AOD <- as.numeric(otherCovariates$AOD)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$NP.1 <- as.factor(otherCovariates$NP.1)
comparison_annot <- data.frame(otherCovariates)
designMat = model.matrix( ~ 0 + NP.1 + AOD + Race + RIN + Sex + Batch + PMI ,data = comparison_annot)
virMat <- Mat
contrast.matrix <- makeContrasts(AD_Definite = NP.12 - NP.11,
AD_Likely = (NP.12+NP.13)/2 - NP.11,
AD_Possible = (NP.14+NP.13+NP.12)/3 - NP.11,
levels=designMat)
fullReadsPerSample <- as.numeric(MSBB_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MSBB_RNA_workspace$metadata$Sample_ID)])
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
=======
load("data/MAYO_TCX_RNA_workspace.RData")
run_voom <- function(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F) {
#otherCovariates$Diagnosis <- factor(as.character(otherCovariates$Diagnosis), levels = c("AD", "Control"))
designMat = model.matrix( ~ 0 + Diagnosis + AOD + Sex + Flowcell + Source + RIN  ,data = otherCovariates)
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
if(!filter) {
>>>>>>> 8e237086a26df4c5c7f7a8cab0b4b72650e043ca
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
<<<<<<< HEAD
paths <- names(MSBB_RNA_workspace$pathologySampleSets)
tests <- colnames(contrast.matrix)
for(i in 1:3) {
viral_tT <- topTable(fit,number=Inf, tests[i])
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
featureDEPerPathologySubset[[paths[i]]] <- viral_tT
}
virus_level_DE_per_region[[tissues[tissue_i]]] <- featureDEPerPathologySubset
}
library(tidyverse)
load('results/tmp.Rdata')
orig <- virus_level_DE_per_region_origin
cont <- virus_level_DE_per_region
all(names(orig) == names(cont))
for(i in names(orig)) {
print(all(names(orig[[i]])==names(cont[[i]])))
}
df_mg <- tibble()
for(i in names(orig)) {
for(j in names(orig[[i]])) {
df_o <- orig[[i]][[j]]
df_c <- cont[[i]][[j]]
df_mg <- bind_rows(
df_mg,
left_join(df_o, df_c, by = "name", suffix = c(".orig", ".cont")) %>%
mutate(tissue = i) %>%
mutate(test = j)
)
}
}
View(df_mg)
source('~/Projects/PlayGround/Neuron-Rebuttal-Revision/tmp3.R')
View(df_mg %>% select(name, starts_with("logFC")))
View(df_mg %>% select(name, starts_with("logFC"), starts_with("P.Value")))
View(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value")))
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value")))
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=P.Value.orig, y=P.Value.cont)) +
geom_point()
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=P.Value.orig, y=P.Value.cont)) +
geom_point() + theme_bw()
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=P.Value.orig, y=P.Value.cont)) +
geom_point() + theme_bw() + facet_grid(tissue~test)
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=logFC.cont, y=logFC.cont)) +
geom_point() + theme_bw() + facet_grid(tissue~test)
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=logFC.orig, y=logFC.cont)) +
geom_point() + theme_bw() + facet_grid(tissue~test)
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=logFC.orig, y=logFC.cont)) +
geom_point() + theme_bw() + facet_grid(tissue~test) + geom_smooth()
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=logFC.orig, y=logFC.cont)) +
geom_point() + theme_bw() + facet_grid(tissue~test) + geom_smooth(method = "rlm")
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=logFC.orig, y=logFC.cont)) +
geom_point() + theme_bw() + facet_grid(tissue~test) + geom_smooth(method = "lm")
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=logFC.orig, y=logFC.cont)) +
geom_point() + theme_bw() + facet_wrap(tissue~test) + geom_smooth(method = "lm")
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=logFC.orig, y=logFC.cont)) +
geom_point() + theme_bw() + facet_wrap(tissue~test, ncol=3) + geom_smooth(method = "lm")
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=logFC.orig, y=logFC.cont)) +
geom_point() + theme_bw() + facet_wrap(tissue~test, ncol=3, scales = "free_xy") + geom_smooth(method = "lm")
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=logFC.orig, y=logFC.cont)) +
geom_point() + theme_bw() + facet_wrap(tissue~test, ncol=3, scales = "free") + geom_smooth(method = "lm")
df_mg <- tibble()
for(i in names(orig)) {
for(j in names(orig[[i]])) {
df_o <- orig[[i]][[j]]
df_c <- cont[[i]][[j]]
df_mg <- bind_rows(
df_mg,
full_join(df_o, df_c, by = "name", suffix = c(".orig", ".cont")) %>%
mutate(tissue = i) %>%
mutate(test = j)
)
}
}
df_mg
View(df_mg)
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=P.Value.orig, y=P.Value.cont)) +
geom_point() + theme_bw() + facet_grid(tissue~test)
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=P.Value.orig, y=P.Value.cont)) +
geom_point() + theme_bw() + facet_grid(tissue~test)
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=P.Value.orig, y=P.Value.cont)) +
geom_point() + theme_bw() + facet_grid(tissue~test) + geom_smooth(method = "lm")
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=P.Value.orig, y=P.Value.cont)) +
geom_point() + theme_bw() + facet_grid(tissue~test) + geom_smooth(method = "lm") + theme(aspect.ratio=1)
(df_mg %>% select(tissue, test, name, starts_with("logFC"), starts_with("P.Value"))) %>%
ggplot(aes(x=logFC.orig, y=logFC.cont)) +
geom_point() + theme_bw() + facet_wrap(tissue~test, ncol=3, scales = "free") + geom_smooth(method = "lm")
=======
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
v <- voom(dge, designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v, design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
}
viral_tT <- topTable(fit,number=Inf)
viral_tT <- data.frame(sequence = MAYO_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MAYO_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
}
run_edgeR <- function(virMat, fullReadsPerSample, otherCovariates, ROSMAP_RNA_workspace, filter = F) {
#otherCovariates$Diagnosis <- factor(as.character(otherCovariates$Diagnosis), levels = c("AD", "Control"))
designMat = model.matrix( ~ 0 + Diagnosis + AOD + Sex + Flowcell + Source + RIN  ,data = otherCovariates)
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
contrast.matrix<-makeContrasts(DiagnosisAD-DiagnosisControl, levels=designMat)
if(!filter){
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge[retainVir,], designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge, designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
as.data.frame(topTags(glf, n = Inf))
}
viral_tT <- as.data.frame(topTags(glf, n = Inf))
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
}
# Viral level summary -----------------------------------------------------
exprMat <- MAYO_RNA_workspace$virusLevelCounts[,MAYO_RNA_workspace$metadata$Sample_ID]
otherCovariates <- MAYO_RNA_workspace$metadata[match(colnames(exprMat), MAYO_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Sex", "Source", "Flowcell", "Diagnosis")]
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "_or_above", replacement = "", fixed = TRUE))
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Diagnosis <- as.factor(gsub(otherCovariates$Diagnosis, pattern = " ", replacement = "_"))
otherCovariates$Source <- as.factor(otherCovariates$Source)
otherCovariates$Flowcell <- as.factor(otherCovariates$Flowcell)
# DE ---------------------------------------------------------------------
virMat <- exprMat
fullReadsPerSample <- as.numeric(MAYO_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MAYO_RNA_workspace$metadata$Sample_ID)])
#will_keep <- otherCovariates$Diagnosis == "AD" | otherCovariates$Diagnosis == "Control"
#virMat <- virMat[,will_keep]
#fullReadsPerSample <- fullReadsPerSample[will_keep]
#otherCovariates <- otherCovariates[will_keep,]
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T) %>% arrange(P.Value)
library(dplyr)
library(tidyverse)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T) %>% arrange(P.Value)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)  %>% arrange(P.Value)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F) %>% arrange(PValue)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T) %>% arrange(PValue)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T) %>% arrange(P.Value)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F)  %>% arrange(P.Value)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)  %>% arrange(P.Value)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F) %>% arrange(P.Value)
run_voom(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T)  %>% arrange(P.Value)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = F) %>% arrange(PValue)
run_edgeR(virMat, fullReadsPerSample, otherCovariates, MAYO_RNA_workspace, filter = T) %>% arrange(PValue)
deseq2_coldata <- otherCovariates
rownames(deseq2_coldata) <- colnames(virMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
# perform DESeq before the filteration
dds <- DESeqDataSetFromMatrix(countData = virMat,
colData = deseq2_coldata,
design = ~ 0 + Education + AOD  + MSex + Race + PMI + RIN + Batch + Diagnosis)
# perform DESeq before the filteration
dds <- DESeq2::DESeqDataSetFromMatrix(countData = virMat,
colData = deseq2_coldata,
design = ~ 0 + Education + AOD  + MSex + Race + PMI + RIN + Batch + Diagnosis)
# perform DESeq before the filteration
dds <- DESeq2::DESeqDataSetFromMatrix(countData = virMat,
colData = deseq2_coldata,
design = ~ 0 +  AOD + Sex + Flowcell + Source + RIN + Diagnosis)
dds <- DESeq(dds[retainVir,])
dds <- DESeq2::DESeq(dds[retainVir,])
as.data.frame(results(dds))
as.data.frame(DESeq2::results(dds))
viral_tT <- as.data.frame(DESeq2::results(dds))
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT <- as.data.frame(DESeq2::results(dds))
viral_tT <- data.frame(sequence = MAYO_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MAYO_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
summary(DESeq2::results(dds))
(DESeq2::results(dds)
)
names(DESeq2::results(dds)))
names(DESeq2::results(dds))
DESeq2::resultsNames(dds)
viral_tT <- as.data.frame(DESeq2::results(dds, name = "Diagnosis_AD_Control"))
as.data.frame(DESeq2::results(dds, name = "Diagnosis_AD_Control")
)
DESeq2::results(dds, name = "Diagnosis_AD_Control")
DESeq2::results(dds, name = "Diagnosis_AD_vs_Control")
