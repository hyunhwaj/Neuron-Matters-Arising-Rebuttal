mutate(is_zero = count > 0) %>%
ggplot(aes(x=is_zero)) +
geom_bar() +
facet_wrap(id~Batch)
df_int %>%
mutate(is_zero = count > 0) %>%
ggplot(aes(x=is_zero)) +
geom_bar(aes(fill=is_zero)) +
facet_wrap(Batch~id)
df_int %>%
mutate(is_zero = count > 0) %>%
ggplot(aes(x=is_zero)) +
geom_bar(aes(fill=status)) +
facet_wrap(id~Batch)
df_int %>%
mutate(is_zero = count > 0) %>%
ggplot(aes(x=is_zero)) +
geom_bar(aes(fill=status)) +
facet_wrap(id~Batch)
df_int %>%
mutate(is_zero = count > 0) %>%
ggplot(aes(x=is_zero)) +
geom_bar(aes(fill=status)) +
facet_wrap(id~Batch, nrow = 2)
df_int %>%
mutate(is_zero = count > 0) %>%
ggplot(aes(x=is_zero)) +
geom_bar(aes(fill=status)) +
facet_grid(id~Batch, nrow = 2)
df_int %>%
mutate(is_zero = count > 0) %>%
ggplot(aes(x=is_zero)) +
geom_bar(aes(fill=status)) +
facet_grid(id~Batch)
df_int %>%
mutate(is_zero = count > 0) %>%
ggplot(aes(x=is_zero)) +
geom_bar(aes(fill=status)) +
facet_grid(id~Batch)
df_int %>% filter(Batch == "E007_C014") %>% kable
df_int %>%
ggplot(aes(x=lib_size, y=count)) +
geom_point(alpha=0.5) +
facet_wrap(status~id) +
scale_x_log10()
df_int %>%
ggplot(aes(x=lib_size, y=count)) +
geom_point(alpha=0.5, aes(color=Sex)) +
facet_wrap(status~id) +
scale_x_log10()
df_int %>%
ggplot(aes(x=lib_size, y=count)) +
geom_point(alpha=0.5, aes(color=Sex)) +
facet_wrap(Sex~id) +
scale_x_log10()
df_int %>%
ggplot(aes(x=count, y=..density..)) +
geom_histogram(alpha=0.5) +
facet_wrap(Sex~id) +
scale_x_log10()
df_int %>%
ggplot(aes(x=count, y=..density..)) +
geom_histogram(alpha=0.5) +
facet_grid(Sex~id) +
scale_x_log10()
df_int %>%
ggplot(aes(x=count, y=..density..)) +
geom_histogram(alpha=0.5, aes(color=Sex)) +
facet_grid(Sex~id) +
scale_x_log10()
df_int %>%
ggplot(aes(x=count, y=..density..)) +
geom_histogram(alpha=0.5, aes(fill=Sex)) +
facet_grid(Sex~id) +
scale_x_log10()
df_int %>%
ggplot(aes(x=count, y=..density..)) +
geom_histogram(alpha=0.5, aes(fill=Sex)) +
facet_wrap(Sex~id, scales="free_y")
df_int %>%
ggplot(aes(x=count, y=..density..)) +
geom_histogram(aes(fill=Sex)) +
facet_wrap(Sex~id, scales="free_y")
df_int %>%
ggplot(aes(x=count, y=..density..)) +
geom_histogram(aes(fill=Status)) +
facet_wrap(Sex~id, scales="free_y")
df_int %>%
ggplot(aes(x=count, y=..density..)) +
geom_histogram(aes(fill=status)) +
facet_wrap(Sex~id, scales="free_y")
library(DESeq2)
library(edgeR)
library(tidyverse)
source("../scripts/R/helper_fxn.R")
load("data/MSBB_RNA_workspace.RData")
tissues <- c("BM_22", "BM_36", "BM_10", "BM_44")
virus_level_DE_per_region <- vector("list", length(tissues))
names(virus_level_DE_per_region) <- tissues
interests <- c("NC_001716.2_region_1_153080__ID=id0", "NC_001664.2_region_1_159322__ID=id0")
## Differential expression of virus level abundance
virus_level_DE_per_region <- vector("list", length(tissues))
names(virus_level_DE_per_region) <- tissues
run_voom <- function(virMat, fullReadsPerSample, comparison_annot, filter = T) {
# create a design matrix and a contrast matrix for the DE analysis
designMat = model.matrix( ~ 0 + status + AOD + Race + RIN + Sex + Batch + PMI ,data = comparison_annot)
contrast.matrix<-makeContrasts(statusCase-statusControl,levels=designMat)
# identify viruses will be retained in further steps (by read counts)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
if(!filter) {
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
as.data.frame(topTable(fit,number=Inf))
}
else {
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge[retainVir,],designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v, design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
as.data.frame(topTable(fit,number=Inf))
}
}
run_edgeR <- function(virMat, fullReadsPerSample, comparison_annot, filter = T) {
# create a design matrix and a contrast matrix for the DE analysis
designMat = model.matrix( ~ 0 + status + AOD + Race + RIN + Sex + Batch + PMI ,data = comparison_annot)
contrast.matrix<-makeContrasts(statusCase-statusControl,levels=designMat)
print(contrast.matrix)
# identify viruses will be retained in further steps (by read counts)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
# perform edgeR (QL F-test) and return a data.frame
if(!filter) {
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge[retainVir,], designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
as.data.frame(topTags(glf, n = Inf))
}
else {
dge <- DGEList(counts=virMat[retainVir,], lib.size = fullReadsPerSample)
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, designMat)
fit <- glmQLFit(dge, designMat)
glf <- glmQLFTest(fit,contrast = contrast.matrix)
as.data.frame(topTags(glf, n = Inf))
}
}
run_deseq2 <- function(virMat, fullReadsPerSample, comparison_annot, filter = T) {
deseq2_coldata <- comparison_annot
rownames(deseq2_coldata) <- colnames(virMat)
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
# perform DESeq before the filteration
if(!filter) {
dds <- DESeqDataSetFromMatrix(countData = virMat,
colData = deseq2_coldata,
design = ~ 0 + AOD + Race + RIN + Sex + Batch + PMI + status)
print(summary(dds))
dds <- DESeq(dds[retainVir,])
as.data.frame(results(dds))
} else {
dds <- DESeqDataSetFromMatrix(countData = virMat[retainVir,],
colData = deseq2_coldata,
design = ~ 0 + AOD + Race + RIN + Sex + Batch + PMI + status)
print(summary(dds))
dds <- DESeq(dds)
print(counts(dds, normalized=T) %>% as.data.frame %>% as_tibble)
as.data.frame(results(dds))
}
}
for(tissue_i in 1:length(tissues)){
featureDEPerPathologySubset <- vector("list", length(MSBB_RNA_workspace$pathologySampleSets))
names(featureDEPerPathologySubset) <- names(MSBB_RNA_workspace$pathologySampleSets)
for(subset_i in 1:length(MSBB_RNA_workspace$pathologySampleSets)){
caseMat <- MSBB_RNA_workspace$virusLevelCounts[,intersect(MSBB_RNA_workspace$pathologySampleSets[[subset_i]], MSBB_RNA_workspace$metadata$Sample_ID[which(MSBB_RNA_workspace$metadata$Region == tissues[tissue_i])])]
controlMat <- MSBB_RNA_workspace$virusLevelCounts[,intersect(MSBB_RNA_workspace$controlSampleSets, MSBB_RNA_workspace$metadata$Sample_ID[which(MSBB_RNA_workspace$metadata$Region == tissues[tissue_i])])]
status <- factor(x = c(rep("Control", ncol(controlMat)), rep("Case", ncol(caseMat))), levels = c("Control","Case"))
otherCovariates <- MSBB_RNA_workspace$metadata[match(c(colnames(controlMat),colnames(caseMat)), MSBB_RNA_workspace$metadata$Sample_ID),c("RIN", "AOD", "Race", "Sex", "Batch", "PMI")]
otherCovariates$AOD <- gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE)
otherCovariates$AOD <- as.numeric(otherCovariates$AOD)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Sex <- as.factor(otherCovariates$Sex)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
comparison_annot <- data.frame(status = status, otherCovariates)
designMat = model.matrix( ~ 0 + status + AOD + Race + RIN + Sex + Batch + PMI ,data = comparison_annot)
virMat <- cbind(controlMat,caseMat)
contrast.matrix<-makeContrasts(statusCase-statusControl,levels=designMat)##
fullReadsPerSample <- as.numeric(MSBB_RNA_workspace$metadata$TotalReads[match(colnames(virMat), MSBB_RNA_workspace$metadata$Sample_ID)])# - as.numeric(U01_workspace$metadata$Mapped[match(colnames(virMat), U01_workspace$metadata$mapped_column_names)])
df_tmp <- data.frame()
viral_tT <- run_deseq2(virMat, fullReadsPerSample, comparison_annot)
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT <- viral_tT %>%
select(sequence, name, logFC = log2FoldChange, FDR = padj) %>%
mutate(method = "DESeq2noFilter")
df_tmp <- rbind(df_tmp, viral_tT)
viral_tT <- run_deseq2(virMat, fullReadsPerSample, comparison_annot, filter = F)
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT <- viral_tT %>%
select(sequence, name, logFC = log2FoldChange, FDR = padj) %>%
mutate(method = "DESeq2wtFilter")
df_tmp <- rbind(df_tmp, viral_tT)
viral_tT <- run_voom(virMat, fullReadsPerSample, comparison_annot)
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT <- viral_tT %>%
select(sequence, name, logFC = logFC, FDR = adj.P.Val) %>%
mutate(method = "VoomLimmanoFilter")
df_tmp <- rbind(df_tmp, viral_tT)
viral_tT <- run_voom(virMat, fullReadsPerSample, comparison_annot, filter = F)
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT <- viral_tT %>%
select(sequence, name, logFC = logFC, FDR = adj.P.Val) %>%
mutate(method = "VoomLimmawtFilter")
df_tmp <- rbind(df_tmp, viral_tT)
viral_tT <- run_edgeR(virMat, fullReadsPerSample, comparison_annot)
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT <- viral_tT %>%
select(sequence, name, logFC, FDR) %>%
mutate(method = "EdgeRnoFilter")
df_tmp <- rbind(df_tmp, viral_tT)
viral_tT <- run_edgeR(virMat, fullReadsPerSample, comparison_annot, filter = F)
viral_tT <- data.frame(sequence = MSBB_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), MSBB_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT <- viral_tT %>%
select(sequence, name, logFC, FDR) %>%
mutate(method = "EdgeRwithFilter")
df_tmp <- rbind(df_tmp, viral_tT)
featureDEPerPathologySubset[[subset_i]] <- list(viral_DE = df_tmp)
}
virus_level_DE_per_region[[tissue_i]] <- featureDEPerPathologySubset
}
df_ret <- data.frame()
for(i in tissues) {
traits <- names(virus_level_DE_per_region[[i]])
for(j in traits) {
df_ij <- virus_level_DE_per_region[[i]][[j]]$viral_DE
df_interest <- df_ij %>% dplyr::filter(name %in% interests)
df_interest$tissue <- i
df_interest$trait <- j
df_ret <- rbind(df_ret, df_interest)
}
}
df_ret %>%
ggplot(aes(x=trait, y=-log10(FDR))) +
#geom_line(stat = "identity", aes(group=method, color=method)) +
geom_bar(stat = "identity", aes(fill=method), width=0.5, position = "dodge") +
geom_hline(yintercept = -log10(0.1)) +
facet_grid(tissue~sequence)
df_ret %>%
ggplot(aes(x=trait, y=logFC)) +
geom_bar(stat = "identity", aes(fill=method), width=0.5, position = "dodge") +
geom_hline(yintercept = 0) +
facet_grid(tissue~sequence)
p1
p2
library(DESeq2)
library(edgeR)
library(tidyverse)
load("data/MSBB_RNA_workspace.RData")
getwd()
options(stringsAsFactors = FALSE)
library(openxlsx)
library(edgeR)
library(limma)
library(plyr)
library(pheatmap)
library(reshape2)
# Load up workspace containing viral counts and metadata ------------------
load("data/ROSMAP_RNA_workspace.RData")
setwd("~/Projects/Neuron-Matters-Arising-Rebuttal")
ROSMAP_RNA_workspace$metadata <- ROSMAP_RNA_workspace$metadata[which(ROSMAP_RNA_workspace$metadata$Study == "ROS"),]
load("data/ROSMAP_RNA_workspace.RData")
ROSMAP_RNA_workspace$metadata <- ROSMAP_RNA_workspace$metadata[which(ROSMAP_RNA_workspace$metadata$Study == "ROS"),]
expr <- ROSMAP_RNA_workspace$virusLevelCounts[,ROSMAP_RNA_workspace$metadata$Sample_ID]
otherCovariates <- ROSMAP_RNA_workspace$metadata[match(colnames(expr), ROSMAP_RNA_workspace$metadata$Sample_ID),c("Study", "AOD", "PMI","MSex", "Race", "RIN", "Batch", "CeradScore", "Education")]
otherCovariates$MSex <- as.factor(otherCovariates$MSex)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Study <- as.factor(otherCovariates$Study)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$CeradScore <- as.factor(otherCovariates$CeradScore)
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE))
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Education <- as.numeric(otherCovariates$Education)
designMat = model.matrix( ~ 0 + CeradScore + Education + AOD  + MSex + Race + PMI + RIN + Batch  ,data = droplevels.data.frame( otherCovariates))
virMat <- expr
fullReadsPerSample <- as.numeric(ROSMAP_RNA_workspace$metadata$TotalReads[match(colnames(virMat), ROSMAP_RNA_workspace$metadata$Sample_ID)])#
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
contrast.matrix <- makeContrasts(cerad_1_minus_4 = CeradScore1 - CeradScore4,
cerad_1_2_minus_4 = (CeradScore1+CeradScore2) - CeradScore4,
cerad_1_2_3_minus_4 = (CeradScore1+CeradScore2+CeradScore3) - CeradScore4,
levels=designMat)
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
viral_level_tT_list <- lapply(colnames(contrast.matrix), function(x) {
viral_tT <- topTable(fit,number=Inf, coef = x)
lh <- limma.one.sided.use.coef(fit, lower = TRUE, coef = x)
rh = 1 - lh
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT$downregulated_pvalue <- unname(lh)[match(viral_tT$name, names(lh))]
viral_tT$upregulated_pvalue <- unname(rh)[match(viral_tT$name, names(rh))]
viral_tT
})
names(viral_level_tT_list) <- colnames(contrast.matrix)
viral_level_DE <- ldply(viral_level_tT_list, rbind, .id = "Comparison")
viral_level_DE <- viral_level_DE[order(viral_level_DE$P.Value, decreasing = FALSE),]
viral_level_tT_list <- lapply(colnames(contrast.matrix), function(x) {
viral_tT <- topTable(fit,number=Inf, coef = x)
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
})
names(viral_level_tT_list) <- colnames(contrast.matrix)
viral_level_DE <- ldply(viral_level_tT_list, rbind, .id = "Comparison")
viral_level_DE <- viral_level_DE[order(viral_level_DE$P.Value, decreasing = FALSE),]
expr <- ROSMAP_RNA_workspace$virusGenomicFeatureCounts[,ROSMAP_RNA_workspace$metadata$Sample_ID]
otherCovariates <- ROSMAP_RNA_workspace$metadata[match(colnames(expr), ROSMAP_RNA_workspace$metadata$Sample_ID),c("Study", "AOD", "PMI","MSex", "Race", "RIN", "Batch", "CeradScore", "Education")]
otherCovariates$MSex <- as.factor(otherCovariates$MSex)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Study <- as.factor(otherCovariates$Study)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$CeradScore <- as.factor(otherCovariates$CeradScore)
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE))
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
viral_level_DE
viral_level_DE %>% View
2.151749e-02
options(stringsAsFactors = FALSE)
library(openxlsx)
library(edgeR)
library(limma)
library(plyr)
library(pheatmap)
library(reshape2)
# Load up workspace containing viral counts and metadata ------------------
load("data/ROSMAP_RNA_workspace.RData")
ROSMAP_RNA_workspace$metadata <- ROSMAP_RNA_workspace$metadata[which(ROSMAP_RNA_workspace$metadata$Study == "MAP"),]
expr <- ROSMAP_RNA_workspace$virusLevelCounts[,ROSMAP_RNA_workspace$metadata$Sample_ID]
otherCovariates <- ROSMAP_RNA_workspace$metadata[match(colnames(expr), ROSMAP_RNA_workspace$metadata$Sample_ID),c("Study", "AOD", "PMI","MSex", "Race", "RIN", "Batch", "CeradScore", "Education")]
otherCovariates$MSex <- as.factor(otherCovariates$MSex)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Study <- as.factor(otherCovariates$Study)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$CeradScore <- as.factor(otherCovariates$CeradScore)
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE))
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Education <- as.numeric(otherCovariates$Education)
designMat = model.matrix( ~ 0 + CeradScore + Education + AOD  + MSex + Race + PMI + RIN + Batch  ,data = droplevels.data.frame( otherCovariates))
# DE ---------------------------------------------------------------------
virMat <- expr
fullReadsPerSample <- as.numeric(ROSMAP_RNA_workspace$metadata$TotalReads[match(colnames(virMat), ROSMAP_RNA_workspace$metadata$Sample_ID)])#
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
# CERAD AD
# 1 Definite
# 2 Probable
# 3 Possible
# 4 No AD
# 9 Missing
contrast.matrix <- makeContrasts(cerad_1_minus_4 = CeradScore1 - CeradScore4,
cerad_1_2_minus_4 = (CeradScore1+CeradScore2) - CeradScore4,
cerad_1_2_3_minus_4 = (CeradScore1+CeradScore2+CeradScore3) - CeradScore4,
levels=designMat)
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
viral_level_tT_list <- lapply(colnames(contrast.matrix), function(x) {
viral_tT <- topTable(fit,number=Inf, coef = x)
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
})
names(viral_level_tT_list) <- colnames(contrast.matrix)
viral_level_DE <- ldply(viral_level_tT_list, rbind, .id = "Comparison")
viral_level_DE <- viral_level_DE[order(viral_level_DE$P.Value, decreasing = FALSE),]
# Viral genomic feature level -------------------------------------------------------------
expr <- ROSMAP_RNA_workspace$virusGenomicFeatureCounts[,ROSMAP_RNA_workspace$metadata$Sample_ID]
otherCovariates <- ROSMAP_RNA_workspace$metadata[match(colnames(expr), ROSMAP_RNA_workspace$metadata$Sample_ID),c("Study", "AOD", "PMI","MSex", "Race", "RIN", "Batch", "CeradScore", "Education")]
otherCovariates$MSex <- as.factor(otherCovariates$MSex)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Study <- as.factor(otherCovariates$Study)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$CeradScore <- as.factor(otherCovariates$CeradScore)
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE))
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Education <- as.numeric(otherCovariates$Education)
designMat = model.matrix( ~ 0 + CeradScore + Education + AOD  + MSex + Race + PMI + RIN + Batch  ,data = droplevels.data.frame( otherCovariates))
# DE ---------------------------------------------------------------------
virMat <- expr
fullReadsPerSample <- as.numeric(ROSMAP_RNA_workspace$metadata$TotalReads[match(colnames(virMat), ROSMAP_RNA_workspace$metadata$Sample_ID)])#
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
# CERAD AD
# 1 Definite
# 2 Probable
# 3 Possible
# 4 No AD
# 9 Missing
contrast.matrix <- makeContrasts(cerad_1_minus_4 = CeradScore1 - CeradScore4,
cerad_1_2_minus_4 = (CeradScore1+CeradScore2)/2 - CeradScore4,
cerad_1_2_3_minus_4 = (CeradScore1+CeradScore2+CeradScore3)/3 - CeradScore4,
levels=designMat)
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
viral_genomic_feature_level_tT_list <- lapply(colnames(contrast.matrix), function(x) {
viral_tT <- topTable(fit,number=Inf, coef = x)
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
})
viral_level_DE <- ldply(viral_level_tT_list, rbind, .id = "Comparison")
viral_level_DE
viral_level_DE %>% View
options(stringsAsFactors = FALSE)
library(openxlsx)
library(edgeR)
library(limma)
library(plyr)
library(pheatmap)
library(reshape2)
# Load up workspace containing viral counts and metadata ------------------
load("data/ROSMAP_RNA_workspace.RData")
ROSMAP_RNA_workspace$metadata <- ROSMAP_RNA_workspace$metadata[which(ROSMAP_RNA_workspace$metadata$Study == "MAP"),]
# Viral level -------------------------------------------------------------
expr <- ROSMAP_RNA_workspace$virusLevelCounts[,ROSMAP_RNA_workspace$metadata$Sample_ID]
otherCovariates <- ROSMAP_RNA_workspace$metadata[match(colnames(expr), ROSMAP_RNA_workspace$metadata$Sample_ID),c("Study", "AOD", "PMI","MSex", "Race", "RIN", "Batch", "CeradScore", "Education")]
otherCovariates$MSex <- as.factor(otherCovariates$MSex)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Study <- as.factor(otherCovariates$Study)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$CeradScore <- as.factor(otherCovariates$CeradScore)
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE))
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Education <- as.numeric(otherCovariates$Education)
designMat = model.matrix( ~ 0 + CeradScore + Education + AOD  + MSex + Race + PMI + RIN + Batch  ,data = droplevels.data.frame( otherCovariates))
virMat <- expr
fullReadsPerSample <- as.numeric(ROSMAP_RNA_workspace$metadata$TotalReads[match(colnames(virMat), ROSMAP_RNA_workspace$metadata$Sample_ID)])#
sign_threshold_population <- 10
virMat <- virMat[rowSums(sign(virMat)) > 0,]
retainVir <- rowSums(virMat >= 2) >= sign_threshold_population
contrast.matrix <- makeContrasts(cerad_1_minus_4 = CeradScore1 - CeradScore4,
cerad_1_2_minus_4 = (CeradScore1+CeradScore2) - CeradScore4,
cerad_1_2_3_minus_4 = (CeradScore1+CeradScore2+CeradScore3) - CeradScore4,
levels=designMat)
dge <- DGEList(counts=virMat, lib.size = fullReadsPerSample)
v <- voom(dge,designMat, lib.size = fullReadsPerSample, normalize.method = "quantile")
fit <- lmFit(object = v[retainVir,], design = designMat)
fit<- contrasts.fit(fit,contrast.matrix)
fit <- eBayes(fit, robust = TRUE)
viral_level_tT_list <- lapply(colnames(contrast.matrix), function(x) {
viral_tT <- topTable(fit,number=Inf, coef = x)
viral_tT <- data.frame(sequence = ROSMAP_RNA_workspace$virus_name_2_accession_ID$VirusName[match(sapply(strsplit(rownames(viral_tT), split = "_"), function(x) paste(x[1:2], collapse = "_")), ROSMAP_RNA_workspace$virus_name_2_accession_ID$Accession)], name = rownames(viral_tT),viral_tT, row.names = NULL)
viral_tT
})
names(viral_level_tT_list) <- colnames(contrast.matrix)
viral_level_DE <- ldply(viral_level_tT_list, rbind, .id = "Comparison")
viral_level_DE <- viral_level_DE[order(viral_level_DE$P.Value, decreasing = FALSE),]
expr <- ROSMAP_RNA_workspace$virusGenomicFeatureCounts[,ROSMAP_RNA_workspace$metadata$Sample_ID]
otherCovariates <- ROSMAP_RNA_workspace$metadata[match(colnames(expr), ROSMAP_RNA_workspace$metadata$Sample_ID),c("Study", "AOD", "PMI","MSex", "Race", "RIN", "Batch", "CeradScore", "Education")]
otherCovariates$MSex <- as.factor(otherCovariates$MSex)
otherCovariates$Race <- as.factor(otherCovariates$Race)
otherCovariates$Study <- as.factor(otherCovariates$Study)
otherCovariates$Batch <- as.factor(otherCovariates$Batch)
otherCovariates$CeradScore <- as.factor(otherCovariates$CeradScore)
otherCovariates$AOD <- as.numeric(gsub(x = otherCovariates$AOD, pattern = "+", replacement = "", fixed = TRUE))
otherCovariates$PMI <- as.numeric(otherCovariates$PMI)
otherCovariates$RIN <- as.numeric(otherCovariates$RIN)
otherCovariates$Education <- as.numeric(otherCovariates$Education)
designMat = model.matrix( ~ 0 + CeradScore + Education + AOD  + MSex + Race + PMI + RIN + Batch  ,data = droplevels.data.frame( otherCovariates))
library(DESeq2)
library(edgeR)
library(tidyverse)
source("../scripts/R/helper_fxn.R")
load("data/MSBB_RNA_workspace.RData")
tissues <- c("BM_22", "BM_36", "BM_10", "BM_44")
virus_level_DE_per_region <- vector("list", length(tissues))
names(virus_level_DE_per_region) <- tissues
interests <- c("NC_001716.2_region_1_153080__ID=id0", "NC_001664.2_region_1_159322__ID=id0")
load("data/MSBB_RNA_workspace.RData")
tissues <- c("BM_22", "BM_36", "BM_10", "BM_44")
virus_level_DE_per_region <- vector("list", length(tissues))
names(virus_level_DE_per_region) <- tissues
interests <- c("NC_001716.2_region_1_153080__ID=id0", "NC_001664.2_region_1_159322__ID=id0")
MMSBB_RNA_workspace
load("data/MSBB_RNA_workspace.RData")
MSBB_RNA_workspace$metadata
MSBB_RNA_workspace$metadata$NP.1
MSBB_RNA_workspace$metadata$Sample_ID %in% MSBB_RNA_workspace$pathologySampleSets$AD_definite
MSBB_RNA_workspace$metadata$Sample_ID %in% MSBB_RNA_workspace$pathologySampleSets$AD_definite + MSBB_RNA_workspace$metadata$Sample_ID %in% MSBB_RNA_workspace$pathologySampleSets$AD_likely + MSBB_RNA_workspace$metadata$Sample_ID %in% MSBB_RNA_workspace$pathologySampleSets$AD_possible
table(MSBB_RNA_workspace$metadata$NP.1, MSBB_RNA_workspace$metadata$Sample_ID %in% MSBB_RNA_workspace$pathologySampleSets$AD_definite + MSBB_RNA_workspace$metadata$Sample_ID %in% MSBB_RNA_workspace$pathologySampleSets$AD_likely + MSBB_RNA_workspace$metadata$Sample_ID %in% MSBB_RNA_workspace$pathologySampleSets$AD_possible)
